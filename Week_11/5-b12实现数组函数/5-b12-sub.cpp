/* 2151298 信11 杨滕超 */

/* 函数实现部分，{ }内的东西可以任意调整，目前的return 0只是一个示例，可改变 */

/* 不允许定义任何形式的外部全局、静态全局、宏定义、只读变量 */

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strlen(const char str[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i;
    for (i = 0;; i++)
    {
        if (str[i] == '\0')
            break;
    }
    return i; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcat(char s1[], const char s2[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i,j;
    for (i = 0;; i++)
    {
        if (s1[i] == '\0')
            break;
    }
    for (j = i;; j++)
    {
        s1[j] = s2[j - i];
        if (s2[j - i] == '\0')
            break;
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncat(char s1[], const char s2[], const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i, j;
    for (i = 0;; i++)
    {
        if (s1[i] == '\0')
            break;
    }
    if (tj_strlen(s2) > len)
    {
        for (j = i; j < i + len; j++)
        {
            s1[j] = s2[j - i];
            if (s2[j - i] == '\0')
                break;
        }
    }
    else
    {
        for (j = i; ; j++)
        {
            s1[j] = s2[j - i];
            if (s2[j - i] == '\0')
                break;
        }
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcpy(char s1[], const char s2[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i,j;
    for (i = 0;; i++)
    {
        if (s2[i] == '\0')
            break;
    }//s2[i]是尾零
    for (j = 0; j <= i; j++)
    {
        s1[j] = s2[j];
    }//赋值到尾零结束
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncpy(char s1[], const char s2[], const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int  i;
    
    if (tj_strlen(s2) > len)
    {
        for (i = 0; i < len; i++)
        {
            
            s1[i] = s2[i];
        }

    }
    else
    {
        for (i = 0; i < tj_strlen(s2); i++)
        {
          
            s1[i] = s2[i];
        }
    }
   
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcmp(const char s1[], const char s2[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i,j=0;
    for (i= 0;!(s1[i]=='\0'&&s2[i]=='\0'); i++)
    {
        if (s1[i] == s2[i])
            j=0;
        else if (s1[i] != s2[i])
        {
            j = (int)(s1[i]) - (int)(s2[i]);
            break;
        }
    }
    return j; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasecmp(const char s1[], const char s2[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i, j = 0;
    char a;
    for (i = 0; !(s1[i] == '\0' && s2[i] == '\0'); i++)
    {
        if (s1[i] == s2[i])
            j = 0;
        else if (s1[i] != s2[i])
        {
            if ((s1[i] >= 'A' && s1[i] <= 'Z') && (s2[i] < 'A' || s2[i] > 'Z'))
            {
                a = (char)(s1[i] + 32);
                if (a == s2[i])
                    j = 0;
                else
                {
                    j = a - s2[i];
                    break;
                }
            }
            else if ((s1[i] < 'A' || s1[i] > 'Z') && (s2[i] >= 'A' && s2[i] <= 'Z'))
            {
                a = (char)(s2[i] + 32);
                if (s1[i]==a)
                    j = 0;
                else
                {
                    j = s1[i] - a;
                    break;
                }
            }
            
            else
            {
                j = (int)(s1[i]) - (int)(s2[i]);
                break;
            }
        }
    }
    return j; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncmp(const char s1[], const char s2[], const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i, j = 0;
    if (tj_strlen(s2) >= len && tj_strlen(s1) >= len)
    {
        for (i = 0; i<len; i++)
        {
            if (s1[i] == s2[i])
                j = 0;
            else if (s1[i] != s2[i])
            {
                j = (int)(s1[i]) - (int)(s2[i]);
                break;
            }
        }
    }
    else 
    {
        for (i = 0; !(s1[i] == '\0' && s2[i] == '\0'); i++)
        {
            if (s1[i] == s2[i])
                j = 0;
            else if (s1[i] != s2[i])
            {
                j = (int)(s1[i]) - (int)(s2[i]);
                break;
            }
        }
    }
    
    return j; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasencmp(const char s1[], const char s2[], const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i, j = 0;
    char a;
    if (tj_strlen(s2) >= len && tj_strlen(s1) >= len)
    {
        for (i = 0; i<len; i++)
        {
            if (s1[i] == s2[i])
                j = 0;
            else if (s1[i] != s2[i])
            {
                if ((s1[i] >= 'A' && s1[i] <= 'Z') && (s2[i] < 'A' || s2[i] > 'Z'))
                {
                    a = (char)(s1[i] + 32);
                    if (a == s2[i])
                        j = 0;
                    else
                    {
                        j = a - s2[i];
                        break;
                    }
                }
                else if ((s1[i] < 'A' || s1[i] > 'Z') && (s2[i] >= 'A' && s2[i] <= 'Z'))
                {
                    a = (char)(s2[i] + 32);
                    if (s1[i] == a)
                        j = 0;
                    else
                    {
                        j = s1[i] - a;
                        break;
                    }
                }

                else
                {
                    j = (int)(s1[i]) - (int)(s2[i]);
                    break;
                }
            }
        }
    }
    else 
    {
        for (i = 0; !(s1[i] == '\0' && s2[i] == '\0'); i++)
        {
            if (s1[i] == s2[i])
                j = 0;
            else if (s1[i] != s2[i])
            {
                if ((s1[i] >= 'A' && s1[i] <= 'Z') && (s2[i] < 'A' || s2[i] > 'Z'))
                {
                    a = (char)(s1[i] + 32);
                    if (a == s2[i])
                        j = 0;
                    else
                    {
                        j = a - s2[i];
                        break;
                    }
                }
                else if ((s1[i] < 'A' || s1[i] > 'Z') && (s2[i] >= 'A' && s2[i] <= 'Z'))
                {
                    a = (char)(s2[i] + 32);
                    if (s1[i] == a)
                        j = 0;
                    else
                    {
                        j = s1[i] - a;
                        break;
                    }
                }

                else
                {
                    j = (int)(s1[i]) - (int)(s2[i]);
                    break;
                }
            }
        }
    }
    return j; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strupr(char str[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i;
    for (i = 0; ; i++)
    {
        if (str[i] >= 'a' && str[i] <= 'z')
            str[i] = (char)(str[i] - 32);
        if (str[i] == '\0')
            break;
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strlwr(char str[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i;
    for (i = 0; ; i++)
    {
        if (str[i] >= 'A' && str[i] <= 'Z')
            str[i] = (char)(str[i] + 32);
        if (str[i] == '\0')
            break;
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strchr(const char str[], char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i, j=0;
    for (i = 0;str[i]!='\0'; i++)
    {
        if (str[i] == ch)
        {
            j = i + 1;
            break;
        }
        else
            j = 0;
    }
    return j; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strstr(const char str[], const char substr[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i, j=0, k, m = 0,sum=0;
    for (i = 0; str[i] != '\0'; i++)
    {
        sum = 0;
        for (k = 0, m = i; substr[k] != '\0'; k++, m++)
        {
            if (str[m] == substr[k])//有一个字符一样记一次
                sum++;
        }
        if (sum == tj_strlen(substr))//每个字符都一样（次数等于substr字符长度）
        {
            j = i + 1;
            break;//第一个出现了马上停止
        }
    }
    
    return j;  //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrchr(const char str[], const char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i, j = 0;
    for (i = 0; str[i] != '\0'; i++)
    {
        if (str[tj_strlen(str)-i-1] == ch)
        {
            j = i ;
            break;
        }
        else
            j = 0;
    }
    if (j == 0)
        return 0;
    else
        return tj_strlen(str)- j; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrstr(const char str[], const char substr[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i, j = 0, k, m = 0, sum = 0;
    for (i = 0; str[i] != '\0'; i++)
    {
        sum = 0;
        for (k = 0, m = i; substr[k] != '\0'; k++, m++)
        {
            if (str[m] == substr[k])
                sum++;
        }
        if (sum == tj_strlen(substr))
        {
            j = i + 1;//break去掉即可表示最后一个
        }
    }
    return j; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrev(char str[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i,len;
    char t;
    len = tj_strlen(str);
    for (i = 0; i<=(len/2)&&str[i]!='\0'; i++)
    {
        t = str[i];
        str[i] = str[tj_strlen(str)-i-1];
        str[tj_strlen(str) - i - 1] = t;
    }
    return 0; //return值可根据需要修改
}