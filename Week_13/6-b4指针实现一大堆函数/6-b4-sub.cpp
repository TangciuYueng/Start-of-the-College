/* 学号 姓名 班级 */

#include <cstdio>   //NULL
//不再允许包含任何系统头文件

/* ----- 不允许定义任何形式的全局变量/全部数组/只读全局变量/宏定义!!!!! ----- */

/* 函数实现部分，{ }内的东西可以任意调整，目前的return只是一个示例，可改变 */
/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strlen(const char* str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i;
    if (str == NULL)//特判空指针
        return 0;
    else
    {
        /*只要不是\0，就i++*/
        for (i = 0;; i++, str++)
            if (*str == '\0')
                break;
        return i;
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char* tj_strcat(char* s1, const char* s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    char* s10 = s1;
    /*从s1的尾零开始赋值*/
    s1 += tj_strlen(s1);
    if (s1 == NULL)//这时不能接东西
        return NULL;
    else
    {
        if (s2 == NULL)//拼接上一个空的相当于啥也不干
            ;
        else
        {
            for (;; s2++, s1++)
            {
                *s1 = *s2;
                if (*s2 == '\0')
                    break;
            }
        }
        s1 = s10;//s1复位
        return s1;
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char* tj_strncat(char* s1, const char* s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    char* s10 = s1;
    int i;
    /*从s1的尾零开始赋值*/
    s1 += tj_strlen(s1);
    if (s1 == NULL)//这时不能接东西
        return NULL;
    else
    {
        if (s2 == NULL)//拼接上一个空的相当于啥也不干
            ;
        else//正常拼接
        {
            if (tj_strlen(s2) > len)//s2比len长，就只接上len个
            {
                for (i = 0; i < len; s1++, s2++, i++)//i负责计数
                {
                    *s1 = *s2;//先赋值，再判断是\0就结束
                    if (*s2 == '\0')
                        break;
                }
                *s1 = '\0';//s2的len个中可能没有\0，此处添加
            }
            else//s2小于等于len，接上整个s2
            {
                for (;; s1++, s2++)
                {
                    *s1 = *s2;//先赋值，再判断是\0就结束
                    if (*s2 == '\0')
                        break;
                }
            }
        }
        s1 = s10;//s1复位
        return s1;
    }
    
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strcpy(char *s1, const char *s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    char* s10 = s1;
    if (s1 == NULL)
        return 0;
    else 
    {
        if (s2 == NULL)//放个空的在开头
            *s1='\0';
        else
        {
            for (;; s2++, s1++)
            {
                *s1 = *s2;//从s1的第一个开始赋值
                if (*s2 == '\0')
                    break;
            }
        }
        s1 = s10;//s1复位
        return s1;
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strncpy(char *s1, const char *s2, const int len)
{
    char* s10 = s1;
    int i;
    if (s1 == NULL)
        return 0;
    else
    {
        if (s2 == NULL)
            ;
        else
        {
            if (tj_strlen(s2) > len)
            {
                for (i = 0; i < len; s2++, s1++, i++)//i计数
                {
                    if (*s2 == '\0')//cpy不把\0复制过来，先判断
                        break;
                    *s1 = *s2;
                }
            }
            else
            {
                for (;; s2++, s1++)
                {
                    if (*s2 == '\0')
                        break;
                    *s1 = *s2;
                }
            }
        }
        s1 = s10;//s1复位
        return s1;
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcmp(const char *s1, const char *s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0;
    if (s1 == NULL)//出现NULL的特判
    {
        if (s2 == NULL)
            return 0;
        else
            return -1;
    }
    else
    {
        if (s2 == NULL)
            return 1;
        else
        {
            /*两个不全为零，比较,i作为差值*/
            for (; !(*s1 == '\0' && *s2 == '\0'); s1++, s2++)
            {
                if (*s1 == *s2)
                    i = 0;
                else
                {
                    i = *s1 - *s2;
                    break;//一出现不一样就结束循环
                }
            }
        }
        return i;
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasecmp(const char *s1, const char *s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0;
    char a;
    if (s1 == NULL)//NULL的特判
    {
        if (s2 == NULL)
            return 0;
        else
            return -1;
    }
    else
    {
        if (s2 == NULL)
            return 1;
        else
        {
            /*两个不全为零，比较,i作为差值*/
            for (; !(*s1 == '\0' && *s2 == '\0'); s1++, s2++)
            {
                if (*s1 == *s2)
                    i = 0;
                /*发现不同了，接着判断是否字母*/
                else
                {
                    /*s1是大写，s2不是大写，将s1转成小写再比较*/
                    if ((*s1 >= 'A' && *s1 <= 'Z') && (*s2 < 'A' || *s2>'Z'))
                    {
             
                        a = (char)(*s1 + 32);
                        if (a == *s2)
                            i = 0;
                        else
                        {
                            i = a - *s2;
                            break;
                        }
                    }
                    /*s2是大写，s1不是大写，将s2转成小写再比较*/
                    else if ((*s1 < 'A' || *s1 > 'Z') && (*s2 >= 'A' && *s2 <= 'Z'))
                    {
                        a = (char)(*s2 + 32);
                        if (*s1 == a)
                            i = 0;
                        else
                        {
                            i = *s1 - a;
                            break;
                        }
                    }
                    /*都是大写或都不是大写，直接作差*/
                    else
                    {
                        i = *s1 - *s2;
                        break;
                    }
                }
            }
        }
        return i;
    }
    
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncmp(const char *s1, const char *s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0, j = 0;
    if (s1 == NULL)
    {
        if (s2 == NULL)
            return 0;
        else
            return -1;
    }
    else
    {
        if (s2 == NULL)
            return 1;
        else
        {
            /*去i计数，j为差值，s1 s2都大于等于len，正常在len个长度比较*/
            if (tj_strlen(s2) >= len && tj_strlen(s1) >= len)
            {
                for (; i < len; i++, s1++, s2++)
                {
                    if (*s1 == *s2)
                        j = 0;
                    else
                    {
                        j = *s1 - *s2;
                        break;
                    }
                }
            }
            /*有一个字符串比len小，不都是\0时候比较*/
            else
            {
                for (i = 0; !(*s1 == '\0' && *s2 == '\0'); i++, s1++, s2++)
                {
                    if (*s1 == *s2)
                        j = 0;
                    else
                    {
                        j = *s1 - *s2;
                        break;
                    }
                }
            }
        }
        return j;
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasencmp(const char *s1, const char *s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0, j = 0;
    char a;
    if (s1 == NULL)
    {
        if (s2 == NULL)
            return 0;
        else
            return -1;
    }
    else
    {
        if (s2 == NULL)
            return 1;
        else
        {
            /*先判断长度*/
            if (tj_strlen(s2) >= len && tj_strlen(s1) >= len)
            {
                for (i = 0; i < len; i++, s1++, s2++)
                {
                    if (*s1 == *s2)
                        j = 0;
                    /*再判断是否大写*/
                    else
                    {
                        if ((*s1 >= 'A' && *s1 <= 'Z') && (*s2 < 'A' || *s2>'Z'))
                        {

                            a = (char)(*s1 + 32);
                            if (a == *s2)
                                j = 0;
                            else
                            {
                                j = a - *s2;
                                break;
                            }
                        }
                        else if ((*s1 < 'A' || *s1 > 'Z') && (*s2 >= 'A' && *s2 <= 'Z'))
                        {
                            a = (char)(*s2 + 32);
                            if (*s1 == a)
                                j = 0;
                            else
                            {
                                j = *s1 - a;
                                break;
                            }
                        }
                        else
                        {
                            j = *s1 - *s2;
                            break;
                        }
                    }
                }
            }
            else
            {
                for (; !(*s1 == '\0' && *s2 == '\0'); s1++, s2++)
                {
                    if (*s1 == *s2)
                        j = 0;
                    else
                    {
                        if ((*s1 >= 'A' && *s1 <= 'Z') && (*s2 < 'A' || *s2>'Z'))
                        {

                            a = (char)(*s1 + 32);
                            if (a == *s2)
                                j = 0;
                            else
                            {
                                j = a - *s2;
                                break;
                            }
                        }
                        else if ((*s1 < 'A' || *s1 > 'Z') && (*s2 >= 'A' && *s2 <= 'Z'))
                        {
                            a = (char)(*s2 + 32);
                            if (*s1 == a)
                                j = 0;
                            else
                            {
                                j = *s1 - a;
                                break;
                            }
                        }
                        else
                        {
                            j = *s1 - *s2;
                            break;
                        }
                    }
                }
            }
            
        }
        return j;
    }

}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strupr(char *str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    char* str0 = str;
    if (str == NULL)
        return 0;
    else
    {
        for (;; str++)
        {
            if (*str >= 'a' && *str <= 'z')//遇到小写就ASCII码-32，变为大写
                *str = (char)(*str - 32);
            else if (*str == '\0')//遇到\0就结束
                break;
        }
        str = str0;//str复位
        return str;
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strlwr(char *str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    char* str0 = str;
    if (str == NULL)
        return 0;
    else
    {
        for (;; str++)
        {
            if (*str >= 'A' && *str <= 'Z')//遇到大写就ascii码加上32，变为小写
                *str = (char)(*str + 32);
            else if (*str == '\0')//遇到\0就结束
                break;
        }
        str = str0;//str复位
        return str;
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strchr(const char *str, const char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i,j=0;
    if (str == NULL)
        return 0;
    else
    {
        /*i负责记录循环多少次*/
        for (i=0; *str != '\0'; i++, str++)
        {
            if (*str == ch)//找到了那个ch，j表示第几个，并且结束
            {
                j = i + 1;
                break;
            }
            else//找不到，j就是0
                j = 0;
        }
        return j;
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strstr(const char* str, const char* substr)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0, x, j = 0, y;
    const char* a = str, * b = substr;
    x = tj_strlen(str);
    y = tj_strlen(substr);
    if (str == NULL || substr == NULL)
        return 0;
    else {
        //begin to search 
        //i 表示str中第几个字符
        for (i = 0; i < x; i++) {
            b = substr;//b一开始指向substr的第一个字符
            if (*a == *b) {//如果在str中找到某个相等与substr的第一个
                j = i;//j记下来i值
                /*a指向str的第j+1个（j开始为i）
                b指向substr的第j+1个
                */
                do {
                    a = str + j;
                    b = substr + j - i;
                    if (*a != *b)
                        break;
                    j++;
                } while (j < i + y);
                if (j == i + y)
                    return (i + 1);
               
                a = a - j + i;//!!!!!!!!
            }
            a++;
            if (i == x - 1)//!!!!!!!!!!
                return 0;
        }
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrchr(const char *str, const char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i, j = 0, k = 0;
    if (str == NULL)
        return 0;
    else
    {
        for (i = 0; *str != '\0'; i++, str++)//i计数，j表示第几个，k存着j的值
        {
            if (*str == ch)
            {
                j = i + 1;
                k = j;//先存着，有新的再覆盖
            }
            else
                j = 0;
        }
        return k;
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrstr(const char *str, const char *substr)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i, j = 0, k, m = 0, sum = 0;
    if (str == NULL)
        return 0;
    else
    {
        if (substr == NULL)
            return 0;
        else
        {
            /*begin to search*/
            for (i = 0; *str != '\0'; i++, str++)
            {
                /*sum复位*/
                sum = 0;
                for (k = 0; *substr != '\0'; k++, str++, substr++)
                {
                    if (*str == *substr)
                        sum++;
                }
                /*找sub完成，将str，substr复位*/
                str -= k;
                substr -= k;

                if (sum == tj_strlen(substr))
                {
                    j = i + 1;//没有break等待下一次覆盖
                }
            }
            return j;
        }
    }
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char* tj_strrev(char* str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    char* str1 = str, t, * str0 = str;
    str1 += tj_strlen(str);
    str1--;//令str1一开始是str的最后一个元素（非\0)
    int i, len = tj_strlen(str) / 2;//在这里赋值，防止出现与i比较时有无符号和有符号问题
    if (str == NULL)
        return 0;
    else
    {
        /*交换一半即可结束，每次循环str往后一个，str1往前一个*/
        for (i = 0; i <= len && *str != '\0'; i++, str++, str1--)
        {
            t = *str;
            *str = *str1;
            *str1 = t;
        }
        str = str0;
        return str;
    }
}
